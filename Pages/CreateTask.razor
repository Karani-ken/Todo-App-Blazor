@* @inject IToastService toast *@
@inject IToastService ToastService;
<div class="form-group">
    <label for="Title">Title</label>
    <input type="text" class="form-control" @bind-value="@newTask.Title" id="Title" placeholder="Task Title">
</div>
<div class="form-group">
    <label for="Description">Description</label>
    <input type="text" class="form-control" @bind-value="@newTask.Description"  id="Description" placeholder="Task Description">
</div>

<button @onclick="@(isEditing ? EditTask : SaveTask)" class="mt-4  btn btn-primary">
    @if (isEditing)
    {
        <p>Edit Task</p>
    }
    else
    {
        <p>Add Task</p>
    }
</button>
     

@code {
    private bool isEditing=false;

    /* create a new Task*/
    public TaskDto newTask = new TaskDto()
        {
            TaskId = Guid.NewGuid()
        };


    [Parameter]
    public EventCallback<TaskDto> CreateNewTask { get; set; }

    [Parameter]
    public EventCallback<TaskDto> UpdateTask { get; set; }

    [Parameter]
    public TaskDto EditTaskProp
    {
        get => newTask;
        set
        {
            newTask = value;
            isEditing = value != null;
        }
    }
    //called when the component is initialized

    public async Task EditTask()
    {
        await UpdateTask.InvokeAsync(newTask);
        await ToastService.AddToastAsync(
                   message: "Task Updated",
                   type: "info",
                   animation: "fade",
                   autoClose: 3000
       );
        newTask = new TaskDto();
        // toast.ShowInfo("Task Updated");
      
    }
    public async Task SaveTask()
    {
            await CreateNewTask.InvokeAsync(newTask);
        await ToastService.AddToastAsync(
                  message: "Task Created",
                  type: "success",
                  animation: "fade",
                  autoClose: 3000
      );
            newTask = new TaskDto();
            // toast.ShowSuccess("Task Created");
         
       
    }
}
